[{"categories":["プログラミング"],"contents":" ルール std::endl よりも '\\n' または \u0026quot;\\n\u0026quot; を優先してください。\n理由 std::endl マニピュレータは、ほとんどが '\\n' および \u0026quot;\\n\u0026quot; と同等です。 最も一般的に使用されるように、冗長な flush()を実行することにより、出力を単に遅くします。 この速度の低下は、printf スタイルの出力と比較して大幅な場合があります。\n例 std::cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; std::endl; // 2 つの出力操作と 1 flush std::cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\\n\u0026#34;; // 1 つの出力操作といいえ flush  注意  cin / cout（および同等の）対話の場合、flushする理由はありません。 それは自動的に行われます。 ファイルに書き込むために、flush する必要はほとんどありません。 パフォーマンスの（ときどき重要な）問題は別として、'\\n' と std::endl の選択はほぼ完全に美的です。  参照: The C++ Core Guidelines  ","permalink":"https://ohfix.github.io/jp/posts/coding/c++/cpp-new-line-syntax/","series":["C++"],"tags":["C++","お勧め"],"title":"C++ 改行構文"},{"categories":["プログラミング"],"contents":" ルール  {}-初期化構文を優先します。 あいまいさの解析を可能にする ()初期化を避けます。  理由  {} の初期化のルールは、他の形式の初期化よりも単純で、より一般的で、曖昧さが少なく、安全です。 変換を狭めることができないことが確実な場合にのみ、= を使用します。 組み込みの算術型の場合、auto でのみ = を使用します。  例 int x {7.9}; // エラー：ナローイング int y (7.9); // OK：y は 7 になります。コンパイラの警告を期待します int z = 7.9; // OK：z は 7 になります。コンパイラの警告を期待します template\u0026lt;typename T, typename U\u0026gt; void f(T t, U u) { T v1(x); // v1 は関数または変数ですか？  T v2 {x}; // 変数  auto x = T(u); // 建設またはキャスト？ }  執行  絞り込みが発生する算術型を初期化するための = の使用にフラグを立てます。 実際には宣言である () 初期化構文の使用にフラグを立てます。（多くのコンパイラはこれについてすでに警告するはずです。）  参照: The C++ Core Guidelines  ","permalink":"https://ohfix.github.io/jp/posts/coding/c++/cpp-initialize-syntax/","series":["C++"],"tags":["C++","お勧め"],"title":"C++ 構文の初期化"},{"categories":["プログラミング"],"contents":" ルール つかいます nullptr つかいます 0 または NULL。\n理由  読みやすさ。C++ で定義されている NULL は const 型であるため、int の値は 0 であるため、次の例のような状況では誤った結果になる可能性があります。驚きを最小限に抑える：nullptr は int と混同することはできません。これは、ヌル ポインター として定義されているためです。\n したがって、nullptr には適切に指定された（非常に制限的な）型があるため、型の推定 が NULLまたは 0 に対して間違った動作をする可能性のあるシナリオで機能します。\n  例 void f(int); void f(char*); f(NULL); // コール f(int) f(nullptr); // コール f(char*)  執行 ポインターに 0 と NULL の使用を示すフラグ。変換は、単純なプログラム変換によって支援される場合があります。\n参照: The C++ Core Guidelines  ","permalink":"https://ohfix.github.io/jp/posts/coding/c++/cpp-represent-null-pointer/","series":["C++"],"tags":["C++","お勧め","ポインタ"],"title":"C++ ヌルポインターを表す"},{"categories":null,"contents":"わたし Ngo Thanh Phuong Thai、の学生 HCMUS、VietNam。\nコーディングと、テキストエディタ、サブシステムなどのサポートアプリについて興味深いです\u0026hellip;\n個人的なブログページで皆さんと私の経験を共有することを楽しみにしています: Oh, fixed it\n","permalink":"https://ohfix.github.io/jp/about-me/","series":null,"tags":null,"title":"私について"},{"categories":null,"contents":"","permalink":"https://ohfix.github.io/jp/search/","series":null,"tags":null,"title":""}]